{"ast":null,"code":"var aes256 = require(\"aes256\"); //the secret key used for encrypting and decrypting messages\n\n\nvar secret_key = \"uI2ooxtwHeI6q69PS98fx9SWVGbpQohO\"; //returns the encrypted text\n\nexport const to_Encrypt = text => {\n  var encrypted = aes256.encrypt(secret_key, text);\n  return encrypted;\n}; //welcome message is not decrypted\n\nexport const to_Decrypt = (cipher, username) => {\n  if (cipher.startsWith(\"Welcome\")) {\n    return cipher;\n  }\n\n  if (cipher.startsWith(username)) {\n    return cipher;\n  } //decryped message is returned\n\n\n  var decrypted = aes256.decrypt(secret_key, cipher);\n  return decrypted;\n};","map":{"version":3,"sources":["/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/aes.js"],"names":["aes256","require","secret_key","to_Encrypt","text","encrypted","encrypt","to_Decrypt","cipher","username","startsWith","decrypted","decrypt"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB,C,CACA;;;AACA,IAAIC,UAAU,GAAG,kCAAjB,C,CACA;;AACA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClC,MAAIC,SAAS,GAAGL,MAAM,CAACM,OAAP,CAAeJ,UAAf,EAA2BE,IAA3B,CAAhB;AACA,SAAOC,SAAP;AACD,CAHM,C,CAIP;;AACA,OAAO,MAAME,UAAU,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AAC9C,MAAID,MAAM,CAACE,UAAP,CAAkB,SAAlB,CAAJ,EAAkC;AAChC,WAAOF,MAAP;AACD;;AAED,MAAIA,MAAM,CAACE,UAAP,CAAkBD,QAAlB,CAAJ,EAAiC;AAC/B,WAAOD,MAAP;AACD,GAP6C,CAQ9C;;;AACA,MAAIG,SAAS,GAAGX,MAAM,CAACY,OAAP,CAAeV,UAAf,EAA2BM,MAA3B,CAAhB;AACA,SAAOG,SAAP;AACD,CAXM","sourcesContent":["var aes256 = require(\"aes256\");\n//the secret key used for encrypting and decrypting messages\nvar secret_key = \"uI2ooxtwHeI6q69PS98fx9SWVGbpQohO\";\n//returns the encrypted text\nexport const to_Encrypt = (text) => {\n  var encrypted = aes256.encrypt(secret_key, text);\n  return encrypted;\n};\n//welcome message is not decrypted\nexport const to_Decrypt = (cipher, username) => {\n  if (cipher.startsWith(\"Welcome\")) {\n    return cipher;\n  }\n\n  if (cipher.startsWith(username)) {\n    return cipher;\n  }\n  //decryped message is returned\n  var decrypted = aes256.decrypt(secret_key, cipher);\n  return decrypted;\n};\n"]},"metadata":{},"sourceType":"module"}