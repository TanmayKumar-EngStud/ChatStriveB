[{"/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/index.js":"1","/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/App.js":"2","/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/store/reducer/index.js":"3","/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/chat/chat.js":"4","/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/process/process.js":"5","/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/home/home.js":"6","/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/store/reducer/process.js":"7","/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/aes.js":"8","/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/store/action/index.js":"9"},{"size":436,"mtime":1634391588696,"results":"10","hashOfConfig":"11"},{"size":960,"mtime":1634391730660,"results":"12","hashOfConfig":"11"},{"size":268,"mtime":1634391692274,"results":"13","hashOfConfig":"11"},{"size":2524,"mtime":1634391812322,"results":"14","hashOfConfig":"11"},{"size":577,"mtime":1634391878897,"results":"15","hashOfConfig":"11"},{"size":1124,"mtime":1634391772619,"results":"16","hashOfConfig":"11"},{"size":246,"mtime":1634391663388,"results":"17","hashOfConfig":"11"},{"size":605,"mtime":1634391853390,"results":"18","hashOfConfig":"11"},{"size":155,"mtime":1634391645134,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c2m0o3",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/index.js",[],"/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/App.js",[],"/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/store/reducer/index.js",[],"/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/chat/chat.js",["39"],"import \"./chat.scss\";\nimport { to_Decrypt, to_Encrypt } from \"../aes.js\";\nimport { process } from \"../store/action/index\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\n//gets the data from the action object and reducers defined earlier\nfunction Chat({ username, roomname, socket }) {\n  const [text, setText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  const dispatch = useDispatch();\n\n  const dispatchProcess = (encrypt, msg, cipher) => {\n    dispatch(process(encrypt, msg, cipher));\n  };\n\n  useEffect(() => {\n    socket.on(\"message\", (data) => {\n      //decypt the message\n      const ans = to_Decrypt(data.text, data.username);\n      dispatchProcess(false, ans, data.text);\n      console.log(ans);\n      let temp = messages;\n      temp.push({\n        userId: data.userId,\n        username: data.username,\n        text: ans,\n      });\n      setMessages([...temp]);\n    });\n  }, [socket]);\n\n  const sendData = () => {\n    if (text !== \"\") {\n      //encrypt the message here\n      const ans = to_Encrypt(text);\n      socket.emit(\"chat\", ans);\n      setText(\"\");\n    }\n  };\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  console.log(messages, \"mess\");\n\n  return (\n    <div className=\"chat\">\n      <div className=\"user-name\">\n        <h2>\n          {username} <span style={{ fontSize: \"0.7rem\" }}>in {roomname}</span>\n        </h2>\n      </div>\n      <div className=\"chat-message\">\n        {messages.map((i) => {\n          if (i.username === username) {\n            return (\n              <div className=\"message\">\n                <p>{i.text}</p>\n                <span>{i.username}</span>\n              </div>\n            );\n          } else {\n            return (\n              <div className=\"message mess-right\">\n                <p>{i.text} </p>\n                <span>{i.username}</span>\n              </div>\n            );\n          }\n        })}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"send\">\n        <input\n          placeholder=\"enter your message\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              sendData();\n            }\n          }}\n        ></input>\n        <button onClick={sendData}>Send</button>\n      </div>\n    </div>\n  );\n}\nexport default Chat;\n","/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/process/process.js",[],"/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/home/home.js",[],"/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/store/reducer/process.js",[],"/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/aes.js",[],"/home/tanmay/Desktop/ChatStriveB/chatfrontend/src/store/action/index.js",[],{"ruleId":"40","severity":1,"message":"41","line":31,"column":6,"nodeType":"42","endLine":31,"endColumn":14,"suggestions":"43"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatchProcess' and 'messages'. Either include them or remove the dependency array.","ArrayExpression",["44"],{"desc":"45","fix":"46"},"Update the dependencies array to be: [dispatchProcess, messages, socket]",{"range":"47","text":"48"},[960,968],"[dispatchProcess, messages, socket]"]